[main]
authc = org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter

authc.loginUrl = /login.jsf
authc.successUrl = /home.jsf
roles.unauthorizedUrl = /unauthorized.html

ssl.enabled = false

# Use default password matcher (SHA-256, 500000 hash iterations)
passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher

# DataSource Setup
datasource = org.apache.shiro.jndi.JndiObjectFactory
datasource.resourceName = jdbc/aml
datasource.resourceRef = true

# JDBC Realm
jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.authenticationQuery = select PASSWORD from ad_user where username = ? AND isactive = 'Y'
jdbcRealm.userRolesQuery = select r.name from ad_user U, ad_role r, ad_user_roles ur where u.id = ur.ad_user_id and r.id = ur.ad_role_id AND U.isactive = 'Y' AND R.isactive = 'Y' AND UR.isactive = 'Y' and u.username = ?
jdbcRealm.permissionsLookupEnabled = false
#jdbcRealm.permissionsQuery = SELECT permission_name FROM ROLES_PERMISSIONS WHERE role_name = ?
jdbcRealm.credentialsMatcher = $passwordMatcher
jdbcRealm.dataSource = $datasource

securityManager.realms = $jdbcRealm

# Filter Setup
[urls]
/javax.faces.resource/** = anon
/login.jsf = authc
/ui/admin/** = authc, roles[ADMINISTRADOR]
/home.jsf = authc, roles[ADMINISTRADOR,INVITADO]
